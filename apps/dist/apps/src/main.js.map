{
  "version": 3,
  "sources": ["../../../src/main.ts"],
  "sourcesContent": ["import { randomUUID } from 'crypto';\nimport express from 'express';\nimport bodyParser from \"body-parser\";\nimport { User } from './caseData';\nimport { Purchase } from './caseData';\nimport { products } from './products';\nimport { Console } from 'console';\n\nconst host = process.env.HOST ?? 'localhost';\nconst port = process.env.PORT ? Number(process.env.PORT) : 3000;\n\nconst app = express();\n\nconst user : User[] = []; \nconst purchase : Purchase[] = [];\n\nlet SimulatedDay = 0;\n\napp.use(bodyParser.json());\n\napp.use((req, res, next) => {\n  const val = req.rawHeaders; // Reading headers from rawHeader because added values are not available in req.headers\n  for (let i=0; i < val.length; i++){\n    if(val[i] == 'Simulated-Day'){\n      SimulatedDay = parseInt(val[++i]);\n      console.log(SimulatedDay);\n      break;\n    }\n  }  \n  next();\n});\n\napp.listen(port, host, () => {\n  console.log(`[ ready ] http://${host}:${port}`);\n});\n\n//To get list of all users\napp.get('/accounts', (req, res) => {\n  res.send(user);\n});\n\n//to get accountID related user\napp.get('/accounts/:accountId', (req, res) => {\n    //const accID = req.query.accountId; //Use to read query parameters\n  const accID = req.params['accountId']; // Use to read path parameters\n  console.log(accID);\n\n  let resp : User;\n  \n  for (const usr of user){\n    if(usr.uuid == accID){\n      if(usr.simulatedDay === SimulatedDay){\n        const tmpUsr = {...usr};\n        tmpUsr.balance = tmpUsr.balance - tmpUsr.underProcessBal;\n        resp = tmpUsr;\n      }else{\n        usr.underProcessBal = 0; // Assuming request will never be backdated..\n        resp = usr;\n      }\n      break;      \n    }\n  }\n  \n  if(resp !== undefined){\n    res.send(resp);\n  }else{\n    res.send('No user found with given account ID: ' + accID);\n  }  \n});\n\n//Create account\napp.post('/accounts', (req, res) => {    \n  const { name } =  req.body; \n\n  const temp : User = {\n    name: name, \n    balance : 0, \n    uuid : randomUUID(), \n    createdOn : new Date(), \n    lastUpdated : new Date(), \n    simulatedDay : SimulatedDay,\n    underProcessBal : 0\n  };\n  \n  user[user.length] = temp;\n   \n  res.send(user);\n});\n\n//Add Deposit in provided account\napp.post('/accounts/:accountId/deposits', (req, res) => {\n  const accID = req.params['accountId']; // Use to read path parameters\n  const { amount } =  req.body; \n\n  for (const usr of user){\n    if(usr.uuid == accID){\n      usr.simulatedDay = SimulatedDay;\n      usr.balance = usr.balance + amount;\n      if(usr.simulatedDay == SimulatedDay){\n        usr.underProcessBal = amount;      \n      }\n      usr.lastUpdated = new Date();\n      break;\n    }\n  }\n\n  res.send(user);\n});\n\n//Get available products\napp.get('/products', (req, res) => {\n  res.send(products);\n});\n\n//Handle purchase\napp.post('/accounts/:accountId/purchases', (req, res) => {\n  const { productId } = req.body;\n  const accID = req.params['accountId'];\n  let resp: string;\n  let flag = true;\n\n  if(purchase.length > 0){\n    for(let i = purchase.length; i > 0; i--){\n      const currPurch = purchase[i-1];\n      if(currPurch.accountId == accID){  // check if new purchase simulated date is greater than last purchase      \n        if(currPurch.simulatedDay > SimulatedDay){\n          flag = false;\n          res.statusCode = 400;\n          resp = 'Purchase not allowed before existing request..';\n          break;\n        }\n      } \n    }    \n  }\n  \n  if(flag){\n    for (const usr of user){\n        if(usr.uuid == accID){\n          for(const currProd of products){\n            if(currProd.id == productId && currProd.stock > 0 && currProd.price <= usr.balance){  //Check if prod in stock and user has sufficient balance\n              console.log('Processing Purchase..');\n              const tempPurch : Purchase = {\n                accountId : accID,\n                simulatedDay : SimulatedDay,\n                productId : productId\n              }\n              purchase[purchase.length] = tempPurch;\n\n              --currProd.stock;\n              usr.balance = usr.balance-currProd.price;\n\n              resp = 'Purchase of ' + productId + ' is succesfull..';\n            }else{\n              res.statusCode = 409;\n              resp = 'You are not allowed to purchase..';\n            }\n          }\n        }\n      }    \n    }  \n  res.send(resp);\n});\n\n//Add product\napp.post('/products', (req, res) => {\n  const { title } = req.body;\n  const { description } = req.body;\n  const { price } = req.body;\n  const { stock } = req.body;\n\n  const tempProd : typeof products[0] = {\n    id : randomUUID(),\n    title : title,\n    description : description,\n    price : price,\n    stock : stock,\n    \n  };\n\n  products[products.length] = tempProd;\n\n  res.send(tempProd);\n});"],
  "mappings": "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",
  "names": ["express", "bodyParser"]
}
